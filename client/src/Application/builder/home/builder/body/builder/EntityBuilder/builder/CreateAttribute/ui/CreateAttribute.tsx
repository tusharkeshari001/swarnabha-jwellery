import React, { useState } from "react";
import {
  CreateAttributeModel,
  CreateAttributeModelProps,
} from "../model/CreateAttributeModel";
import {
  Autocomplete,
  Checkbox,
  FormControlLabel,
  FormGroup,
  FormLabel,
  Radio,
  RadioGroup,
  TextField,
  Typography,
} from "@mui/material";
import {
  AttributeType,
  SupportedFileFormats,
  TextCase,
  TextFormats,
  makeAttributeDataConfig,
} from "../service/CreateAttributeService";
import "../style/CreateAttributeStyle.css";

export const buildCreateAttributeComponent = (
  createAttributeModel: CreateAttributeModel
) => {
  return <CreateAttribute createAttributeModel={createAttributeModel} />;
};

const CreateAttribute = (props: CreateAttributeModelProps) => {
  const createAttributeModel = props.createAttributeModel;
  const [type, settype] = useState("Text");
  const attributeDataConfig = makeAttributeDataConfig(createAttributeModel);

  return (
    <div className="create-entity-attribute-form">
      <div className="entity-area">
        <div className="attribute-name">
          <FormLabel id="attribute-name">Name : </FormLabel>
          <TextField
            onChange={() => {}}
            sx={{ width: 300 }}
            size="small"
            defaultValue={""}
          />
        </div>
        <div className="display-attribute-name">
          <FormLabel id="display-attribute-name">Display Name : </FormLabel>
          <TextField
            onChange={() => {}}
            sx={{ width: 300 }}
            size="small"
            defaultValue={""}
          />
        </div>
        <div className="attribute-type">
          <FormLabel id="attribute-type">Type : </FormLabel>
          <Autocomplete
            id="combo-box-demo"
            options={AttributeType}
            getOptionLabel={(option: any) => option.label ?? ""}
            onChange={(event: any, child: any) => {
              settype(child.label);
            }}
            sx={{ width: 300 }}
            renderInput={(params) => <TextField {...params} size="small" />}
          />
        </div>
      </div>
      {type === "Text" && <TextType />}
      {type === "Number" && <NumberType />}
      {type === "File" && <FileType />}
      {type === "Date" && <DateType />}
      {type === "DateTime" && <DateTimeType />}
      {type === "Time" && <TimeType />}
      {type === "Boolean" && <BooleanType />}
      {type === "LongText" && <LongTextType />}
      {type === "Activity" && <ActivityType />}

      <div className="audited-or-encrypted">
        <FormGroup aria-label="position" row>
          <FormControlLabel
            value="audited"
            control={<Checkbox />}
            label="Audited"
            labelPlacement="start"
          />
          <FormControlLabel
            value="encrypted"
            control={<Checkbox />}
            label="Encrypted"
            labelPlacement="start"
          />
        </FormGroup>
      </div>
    </div>
  );
};

const TextType = () => {
  return (
    <div className="text-type">
      <div className="default-value">
        <FormLabel id="default-value">Default Value : </FormLabel>
        <TextField onChange={() => {}} size="small" defaultValue={""} />
      </div>
      <div className="identification">
        <FormControlLabel
          value="start"
          control={<Checkbox />}
          label="Unique"
          labelPlacement="start"
        />
        <RadioGroup
          row
          aria-labelledby="demo-row-radio-buttons-group-label"
          name="row-radio-buttons-group"
        >
          <FormControlLabel
            value="AutoGenerated"
            control={<Radio />}
            label="Auto Generated"
          />
          <FormControlLabel
            value="SequenceGenerated"
            control={<Radio />}
            label="Sequence Generated"
          />
        </RadioGroup>
      </div>
      <div className="validation">
        <FormLabel id="user-name">Validations : </FormLabel>
        <div className="isNull">
          <FormControlLabel
            value="start"
            control={<Checkbox />}
            label="NotNull"
            labelPlacement="start"
          />
        </div>
        <div className="text-format">
          <FormLabel id="demo-row-radio-buttons-group-label">
            Text Format :{" "}
          </FormLabel>
          <RadioGroup
            row
            aria-labelledby="demo-row-radio-buttons-group-label"
            name="row-radio-buttons-group"
          >
            {TextFormats.map((_tfs: any) => (
              <FormControlLabel
                value={_tfs["value"]}
                control={<Radio />}
                label={_tfs["label"]}
              />
            ))}
          </RadioGroup>
        </div>
        <div className="text-case">
          <FormLabel id="demo-row-radio-buttons-group-label">
            Text Case :{" "}
          </FormLabel>
          <RadioGroup
            row
            aria-labelledby="demo-row-radio-buttons-group-label"
            name="row-radio-buttons-group"
          >
            {TextCase.map((_tcs: any) => (
              <FormControlLabel
                value={_tcs["value"]}
                control={<Radio />}
                label={_tcs["label"]}
              />
            ))}
          </RadioGroup>
        </div>
        <div className="text-length">
          <FormControlLabel
            value="textlength"
            control={<Checkbox />}
            label="Text Length"
            labelPlacement="start"
          />
        </div>
      </div>
    </div>
  );
};

const NumberType = () => {
  return (
    <div className="number-type">
      <div className="default-value">
        <FormLabel id="default-value">Default Value : </FormLabel>
        <TextField onChange={() => {}} size="small" defaultValue={""} />
      </div>
      <div className="identification">
        <FormControlLabel
          value="start"
          control={<Checkbox />}
          label="Unique"
          labelPlacement="start"
        />
      </div>
      <div className="validation">
        <FormLabel id="user-name">Validations : </FormLabel>
        <div className="isNull">
          <FormControlLabel
            value="start"
            control={<Checkbox />}
            label="NotNull"
            labelPlacement="start"
          />
        </div>
        <div className="number-length">
          <FormControlLabel
            value="start"
            control={<Checkbox />}
            label="Unique"
            labelPlacement="start"
          />
        </div>
        <div className="number-range">
          <FormControlLabel
            value="range"
            control={<Checkbox />}
            label="Range"
            labelPlacement="start"
          />
        </div>
        <div className="number-precision">
          <FormControlLabel
            value="precision"
            control={<Checkbox />}
            label="Precision"
            labelPlacement="start"
          />
        </div>
      </div>
    </div>
  );
};

const FileType = () => {
  return (
    <div className="file-type">
      <div className="default-value">
        <FormLabel id="default-value">Default Value : </FormLabel>
        {/* <TextField onChange={() => {}} size="small" defaultValue={""} /> */}
      </div>
      <div className="identification">
        <FormControlLabel
          value="start"
          control={<Checkbox />}
          label="Unique"
          labelPlacement="start"
        />
      </div>
      <div className="validation">
        <FormLabel id="user-name">Validations : </FormLabel>
        <div className="isNull">
          <FormControlLabel
            value="start"
            control={<Checkbox />}
            label="NotNull"
            labelPlacement="start"
          />
        </div>
        <div className="supported-file-formats">
          <FormLabel id="supported-file-formats">
            Supported File Formats :{" "}
          </FormLabel>
          <FormGroup aria-label="position" row>
            {SupportedFileFormats.map((_sff: any) => {
              return (
                <FormControlLabel
                  value={_sff["value"]}
                  control={<Checkbox />}
                  label={_sff["label"]}
                  labelPlacement="start"
                />
              );
            })}
          </FormGroup>
        </div>
        <div className="file-size">
          <FormLabel id="file-size">File Size : </FormLabel>
          <div className="min-file-siz">
            <FormLabel id="">Min. </FormLabel>
            <TextField
              onChange={() => {}}
              sx={{ width: 300 }}
              size="small"
              type="number"
              defaultValue={""}
            />
            <FormLabel id="">KB </FormLabel>
          </div>
          <div className="max-file-size">
            <FormLabel id="">Max. </FormLabel>
            <TextField
              onChange={() => {}}
              sx={{ width: 300 }}
              size="small"
              type="number"
              defaultValue={""}
            />
            <FormLabel id="">KB </FormLabel>
          </div>
        </div>
      </div>
    </div>
  );
};

const DateType = () => {
  return (
    <div className="date-type">
      <div className="default-value">
        <FormLabel id="default-value">Default Value : </FormLabel>
        <TextField onChange={() => {}} size="small" defaultValue={""} />
      </div>
      <div className="identification">
        <FormControlLabel
          value="start"
          control={<Checkbox />}
          label="Unique"
          labelPlacement="start"
        />
      </div>
      <div className="validation">
        <FormLabel id="user-name">Validations : </FormLabel>
        <div className="isNull">
          <FormControlLabel
            value="start"
            control={<Checkbox />}
            label="NotNull"
            labelPlacement="start"
          />
        </div>
      </div>
    </div>
  );
};

const DateTimeType = () => {
  return (
    <div className="datetime-type">
      <div className="default-value">
        <FormLabel id="default-value">Default Value : </FormLabel>
        <TextField onChange={() => {}} size="small" defaultValue={""} />
      </div>
      <div className="identification">
        <FormControlLabel
          value="start"
          control={<Checkbox />}
          label="Unique"
          labelPlacement="start"
        />
      </div>
      <div className="validation">
        <FormLabel id="user-name">Validations : </FormLabel>
        <div className="isNull">
          <FormControlLabel
            value="start"
            control={<Checkbox />}
            label="NotNull"
            labelPlacement="start"
          />
        </div>
      </div>
    </div>
  );
};

const TimeType = () => {
  return (
    <div className="time-type">
      <div className="default-value">
        <FormLabel id="default-value">Default Value : </FormLabel>
        <FormControlLabel
          value="true"
          control={<Checkbox />}
          label="True"
          labelPlacement="end"
        />
      </div>
      <div className="identification">
        <FormControlLabel
          value="start"
          control={<Checkbox />}
          label="Unique"
          labelPlacement="start"
        />
      </div>
      <div className="validation">
        <FormLabel id="user-name">Validations : </FormLabel>
        <div className="isNull">
          <FormControlLabel
            value="start"
            control={<Checkbox />}
            label="NotNull"
            labelPlacement="start"
          />
        </div>
      </div>
    </div>
  );
};

const BooleanType = () => {
  return (
    <div className="boolean-type">
      <div className="default-value">
        <FormLabel id="default-value">Default Value : </FormLabel>
        <FormControlLabel
          value="true"
          control={<Checkbox />}
          label="True"
          labelPlacement="end"
        />
      </div>
      <div className="identification">
        <FormControlLabel
          value="start"
          control={<Checkbox />}
          label="Unique"
          labelPlacement="start"
        />
      </div>
      <div className="validation">
        <FormLabel id="user-name">Validations : </FormLabel>
        <div className="isNull">
          <FormControlLabel
            value="start"
            control={<Checkbox />}
            label="NotNull"
            labelPlacement="start"
          />
        </div>
      </div>
    </div>
  );
};

const LongTextType = () => {
  return (
    <div className="longtext-type">
      <div className="default-value">
        <FormLabel id="default-value">Default Value : </FormLabel>
      </div>
      <div className="identification">
        <FormControlLabel
          value="start"
          control={<Checkbox />}
          label="Unique"
          labelPlacement="start"
        />
      </div>
      <div className="validation">
        <FormLabel id="user-name">Validations : </FormLabel>
        <div className="isNull">
          <FormControlLabel
            value="start"
            control={<Checkbox />}
            label="NotNull"
            labelPlacement="start"
          />
        </div>
      </div>
    </div>
  );
};

const ActivityType = () => {
  return (
    <div className="activity-type">
      <div className="default-value">
        <FormLabel id="default-value">Default Value : </FormLabel>
      </div>
      <div className="identification">
        <FormControlLabel
          value="start"
          control={<Checkbox />}
          label="Unique"
          labelPlacement="start"
        />
      </div>
      <div className="validation">
        <FormLabel id="user-name">Validations : </FormLabel>
        <div className="isNull">
          <FormControlLabel
            value="start"
            control={<Checkbox />}
            label="NotNull"
            labelPlacement="start"
          />
        </div>
      </div>
    </div>
  );
};
